#!/usr/bin/env python
# logappend
# rainy_day_hackers
# Aug 30, 2014
#

import argparse
import gallerylog.db as db
import gallerylog.sanitize as sn
import sys
import os.path

# TODO: we should customize help output better
parser = argparse.ArgumentParser(description='Appends data to the log at the specified timestamp using the authentication token. If the log does not exist, logappend will create it. Otherwise it will append to the existing log. If the data to be appended to the log is not consistent with the current state of the log, logappend should print "invalid" and leave the state of the log unchanged.')

parser.add_argument('log', metavar='log', nargs='*',
                   help="The path to the file containing the event log. The log's filename may be specified with a string of alphanumeric characters. If the log does not exist, logappend should create it. logappend should add data to the log, preserving the history of the log such that queries from logread can be answered. If the log file cannot be created due to an invalid path, or any other error, logappend should print \"invalid\" and return -1.")

parser.add_argument('-T', dest='timestamp', action='store',
                   default=None,
                   help="Time the event is recorded. This timestamp is formatted as the number of seconds since the gallery opened and is a non-negative integer. Time should always increase, invoking logappend with an event at a time that is prior to the most recent event already recorded is an error.")

parser.add_argument('-K', dest='token', action='store',
                   default=None,
                   help="Token used to authenticate the log. This token consists of an arbitrary-sized string of alphanumeric (a-z, A-Z, and 0-9) characters. Once a log is created with a specific token, any subsequent appends to that log must use the same token.")

parser.add_argument('-E', dest='employeename', action='store', default=None,
                   help="Name of employee. Names are alphabetic characters (a-z, A-Z) in upper and lower case. Names may not contain spaces.")

parser.add_argument('-G', dest='guestname', action='store', default=None,
                   help="Name of guest. Names are alphabetic characters (a-z, A-Z) in upper and lower case. Names may not contain spaces.")

parser.add_argument('-A', dest='arrival', action='store_const', default=False, const=True,
                   help="Specify that the current event is an arrival; can be used with -E, -G, and -R. This option can be used to signify the arrival of an employee or guest to the gallery, or, to a specific room with -R. If -R is not provided, -A indicates an arrival to the gallery as a whole. No employee or guest should enter a room without first entering the gallery. No employee or guest should enter a room without having left a previous room. Violation of either of these conditions implies inconsistency with the current log state and should result in logappend exiting with an error condition.")

parser.add_argument('-L', dest='departure', action='store_const', default=False, const=True,
                   help="Specify that the current event is a departure, can be used with -E, -G, and -R.This option can be used to signify the departure of an employee or guest from the gallery, or, from a specific room with -R. If -R is not provided, -L indicates a deparature from the gallery as a whole. No employee or guest should leave the gallery without first leaving the last room they entered. No employee or guest should leave a room without entering it. Violation of either of these conditions implies inconsistency with the current log state and should result in logappend exiting with an error condition.")

parser.add_argument('-R', dest='roomid', action='store', default=None,
                   help="Specifies the room ID for an event. Room IDs are non-negative integer characters with no spaces. A gallery is composed of multiple rooms. A complete list of the rooms of the gallery is not available and rooms will only be described when an employee or guest enters or leaves one. A room cannot be left by an employee or guest unless that employee or guest has previously entered that room. An employee or guest may only occupy one room at a time. If a room ID is not specified, the event is for the entire art gallery.")

#parser.add_argument('-B', dest = 'batchfile', nargs='?', type=argparse.FileType('r'), default=sys.stdin)
parser.add_argument('-B', dest='batchfile', action='store', default=None, 
                   help="Specifies a batch file of commands. file contains one or more command lines, not including the logappend command itself (just its options), separated by \n (newlines). These commands should be processed by logappend individually, in order. This allows logappend to add data to the file without forking or re-invoking. Of course, option -B cannot itself appear in one of these command lines. Commands specified in a batch file include the log name. Here is an example (the last one).")

#TODO need to handle random flags like -Z

args, unknown = parser.parse_known_args()

#check if arguments are valid

# TODO: handle error cases like -E and -G or -A and -L (we want xor!)

def areArgumentsValid(args):
    returnValue = True

# preliminary flag requirements
    if (args.guestname and args.employeename):
        # can't have both
        returnValue = False
        return returnValue

    if (args.departure and args.arrival):
        # can't have both
        returnValue = False
        return returnValue
    if(not args.batchfile):
        if (not len(args.log) == 1):
            # only one log
            returnValue = False
            return returnValue
        else:
            args.log = args.log[0]

#check if arguments are valid
    if args.employeename:
        #sanitize
        if(sn.sanitizeAlpha(args.employeename) == False):
            returnValue = False
            return returnValue

    if args.timestamp:
        if(sn.sanitizeNumber(args.timestamp) == False):
            returnValue = False
            return returnValue

    if args.token:
        if(sn.sanitizeAlphanumeric(args.token) == False):
            returnValue = False
            return returnValue

    if args.guestname:
       if(sn.sanitizeAlpha(args.guestname) == False):
            returnValue = False
            return returnValue

    if args.roomid:
        if(sn.sanitizeNumber(args.roomid) == False):
            returnValue = False
            return returnValue

    if args.log:
        if(sn.sanitizeAlphanumeric(args.log) == False):
            returnValue = False
            return returnValue

    #required input from user
    return returnValue

def fileHandler(filename):
    if(os.path.isfile(filename)):
        #we have a file on disk to read
        batchFileLine = ""
        batchFile = open(filename, "r")
        for line in batchFile:
        #with open(filename, "r") as batchFile:
         #   for line in batchFile:
            #take newline out of line, then split the lin
            batchFileLine = line.rstrip('\n')
            batchFileLine = batchFileLine.split(" ") #split on spaces from argument list
            batchFileArgs, unknown = parser.parse_known_args(batchFileLine)
            if((areArgumentsValid(batchFileArgs) == True) and not batchFileArgs.batchfile and len(unknown) == 0):
                #arguments are valid
                handler(batchFileArgs)
            else:
                print("invalid")
        return True

    else:
        #file doesnt exist
        print("invalid")
        sys.exit(-1)


def handler(args):
    # now we can open and verify the encrypted database
    #if not args.log or not args.token:
    #    print ("invalid")
    #    sys.exit(-1)
    ### the main program logic goes here

    if(args.batchfile and not (args.token or args.timestamp or args.guestname or args.employeename or args.arrival or args.departure or args.roomid or args.log)):
        #batchfile mode
        return fileHandler(args.batchfile) #call the file handler 


    if(args.token and args.timestamp and (args.guestname or args.employeename) and (args.arrival or args.departure) and args.log):
        sql = db.DB(args.log, args.token)
        if not sql.successful():
            sys.stderr.write('security error\n')
            return False

        #valid query
        #G - guest char
        #E - employee char
        personType = ""
        #A - arrival char
        #D - departure char
        direction = ""
        name = ""
        if(args.guestname):
            personType = "G"
            name = args.guestname
        if(args.employeename):
            personType = "E"
            name = args.employeename
        if(args.arrival):
            direction = "A"
        if(args.departure):
            direction = "D"
            
        #also need to call inPersoninGallery and getCurrentRoomForPerson, then we can add the log entry
        #there are 3 cases:
        # case1: 
        # EG
        # [ LG | ER$ ]
        #
        # case2:
        # EG
        # ER13
        # [ LR13 ]
        # 
        # Case3:
        # EG
        # ER13
        # LR13
        # [ ER$ | LG ]

##########CASEs############################################
        if(args.timestamp):
            args.timestamp = int(args.timestamp)
            if(args.timestamp > 4294967295):
                print("invalid")
                return False
        if(args.roomid):
            args.roomid = int(args.roomid)

        if(sql.isPersonInGallery(name, personType)): 
            #the person is already in the gallery
            if(sql.getCurrentRoomForPerson(name, personType) == None):
                #they are between rooms, or in gallery
                #then they can only enter a room from here, or leave the gallery
                if((sql.lastLoggedTime() < args.timestamp) and direction and not ((args.roomid == None) and direction == 'A')):
                    sql.addLogEntry(name, personType, direction, args.timestamp, args.roomid)
                else:
                    #not a valid time stamp
                    print("invalid")
                    return False

            elif((sql.getCurrentRoomForPerson(name, personType) == args.roomid) and direction == "D" and (sql.lastLoggedTime() < args.timestamp)):
                #need to leave room first
                sql.addLogEntry(name, personType, direction, args.timestamp, args.roomid)
            else:
                #invalid
                print("invalid")
                return False

        else:
            #they are not in the gallery, so they only can enter the gallery
            if(args.arrival):
                #valid
                #need to check time for user against gallery time
                if((sql.lastLoggedTime() < args.timestamp) and sql.isPersonNew(name, personType) and args.roomid == None):
                    #valid time stamp
                    sql.addLogEntry(name, personType, direction, args.timestamp, args.roomid) #add the log entry
                else:
                    #not a valid time stamp
                    print("invalid")
                    return False

            elif(args.departure):
                #invalid, they cant leave if they arent already there
                print("invalid")
                return False

        # always gracefully close the DB after it is open!
        if(sql):
            sql.closeDBFile()
            return True

    else:
        print("invalid")
        return False

def main(args):
    if (areArgumentsValid(args) == True and len(unknown) == 0):
        #either in batch file mode or normal mode
        #now we know the arguments are valid, start passing them to db backend
        if((handler(args) == False)):
            #cmd line handler
            sys.exit(-1)

    else:
        print ("invalid")
        sys.exit(-1)

main(args)
