#!/usr/bin/env python
# logread
# rainy_day_hackers
# Aug 30, 2014
#

import string
import sys
import os.path
import argparse
import gallerylog.db as db
import gallerylog.sanitize as sn


# --------------------------------------------------
# setting up parser
# --------------------------------------------------
parser = argparse.ArgumentParser(description='queries the state of the gallery. It prints which employees and guests are in the gallery or its rooms, and allows for various time-based queries of the state of the gallery.')

parser.add_argument('log', metavar='log',  nargs='*',
                   help="The path to the file log used for recording events. The filename may be specified with a string of alphanumeric characters.")

parser.add_argument('-K', dest='token', action='store',
                   default='',
                   help="Token used to authenticate the log. This token consists of an arbitrary sized string of alphanumeric characters and will be the same between executions of logappend and logread. If the log cannot be authenticated with the token (i.e., it is not the same token that was used to create the file), then \"security error\" should be printed to stderr and -1 should be returned.")

parser.add_argument('-E', dest='employeename', action='append', default=list(),
                   help="Employee name. May be specified multiple times.")

parser.add_argument('-G', dest='guestname', action='append', default=list(),
                   help="Guest name. May be specified multiple times.")

parser.add_argument('-H', dest='html', action='store_const', default=False, const=True,
                   help="Specifies output to be in HTML (as opposed to plain text). Details in options below.")

parser.add_argument('-S', dest='state', action='store_const', default=False, const=True,
                   help="Print the current state of the log to stdout. The state should be printed to stdout on at least two lines, with lines separated by the \n (newline) character. The first line should be a comma-separated list of employees currently in the gallery. The second line should be a comma-separated list of guests currently in the gallery. The remaining lines should provide room-by-room information indicating which guest or employee is in which room. Each line should begin with a room ID, printed as a decimal integer, followed by a colon, followed by a space, followed by a comma-separated list of guests and employees. Room IDs should be printed in ascending integer order, all guest/employee names should be printed in ascending lexicographic string order. If -H is specified, the output should instead be formatted as HTML conforming to the following HTML specification.")

parser.add_argument('-R', dest='roomlist', action='store_const', default=False, const=True,
                   help="Give a list of all rooms entered by an employee or guest. Output the list of rooms in chronological order. If this argument is specified, either -E or -G must be specified. The list is printed to stdout in one comma-separated list of room identifiers. If -H is specified, the format should instead by in HTML conforming to the following HTML specification.")

parser.add_argument('-T', dest='totaltime', action='store_const', default=False, const=True,
                   help="Give a total amount of time for a guest/user in the gallery.")

parser.add_argument('-A', dest='empsearch', action='store_const', default=False, const=True,
                   help="List employees present between times -L/-U.")

parser.add_argument('-B', dest='empsearchexclude', action='store_const', default=False, const=True,
                   help="List employees present between first time range -L/-U but not during the second given time range.")

parser.add_argument('-L', dest='lowtime', default=list(), action='append',
                   help="Lower time bound, integer: 0 or greater.")

parser.add_argument('-U', dest='uppertime', default=list(), action='append',
                   help="Upper time bound, integer: 0 or greater and greater than or equal to lower.")

parser.add_argument('-I', dest='roomhistory', action='store_const', default=False, const=True,
                   help="List any rooms occupied by all of the given people -G/-E at the same time.")


args, unknown = parser.parse_known_args()


# -----------------------------------------------------
# Functions
# -----------------------------------------------------

# specifcation for how to fail
def invalid():
    print("invalid")
    sys.exit(-1)


# [-H] -S html header stuff
def SHtmlStart():
    print("<html>")
    print("<body>")
    print("<table>")
    print("<tr>")
    print("<th>Employee</th>")
    print("<th>Guest</th>")
    print("</tr>")
    print("<tr>")

def SHtmlMid():
    print("</tr>")
    print("</table>")
    print("<table>")
    print("<tr>")
    print("<th>Room ID</th>")
    print("<th>Occupants</th>")
    print("</tr>")

# [-H] -R html header stuff
def RHtmlStart():
    print("<html>")
    print("<body>")
    print("<table>")
    print("<tr>")
    print("<th>Rooms</th>")
    print("</tr>")

def HtmlEnd():
    print("</table>")
    print("</body>")
    print("</html>")

def AHtmlStart():
    print("<html>")
    print("<body>")
    print("<table>")
    print("<tr>")
    print("<th>Employees</th>")
    print("</tr>")

# -----------------------------------------------
# Begin main
# -----------------------------------------------

# validate args


# unkown args (ie: -z) emit fail
if(len(unknown) > 0):
    invalid()

# right amount of args?
#if ((args.state and args.roomlist) or
#        (args.state and args.totaltime) or
#        (args.roomlist and args.totaltime) or not
#        (args.state or args.roomlist or args.totaltime)):
    # can't have both/all but must have one
    #invalid()

# right amount of args? cleaner version
# if -S
if (args.state):
    if (args.roomlist or args.totaltime or args.empsearchexclude or args.empsearch or len(args.lowtime) > 0 or len(args.uppertime) > 0 or len(args.employeename) > 0 or len(args.guestname) > 0 or args.roomhistory):
        invalid()
# if -R
if (args.roomlist):
    if (args.state or args.totaltime or args.empsearchexclude or args.empsearch or len(args.lowtime) > 0 or len(args.uppertime) > 0 or args.roomhistory):
        invalid()
# if -T
if (args.totaltime):
    if (args.state or args.roomlist or args.empsearchexclude or args.empsearch or len(args.lowtime) > 0 or len(args.uppertime) > 0 or args.html or args.roomhistory):
        invalid()        # html not valid flag for totaltime
# if -A
if (args.empsearch):
    if (args.state or args.roomlist or args.empsearchexclude or args.totaltime or len(args.guestname) > 0 or len(args.employeename) > 0 or not args.lowtime or not args.uppertime or args.roomhistory or len(args.lowtime) != 1 or len(args.uppertime) != 1):
        invalid()
# if -B
if (args.empsearchexclude):
    if (args.state or args.roomlist or args.empsearch or args.totaltime or len(args.guestname) > 0 or len(args.employeename) > 0 or not args.lowtime or not args.uppertime or args.roomhistory or len(args.lowtime) != 2 or len(args.uppertime) != 2):
        invalid()
# if -I
if (args.roomhistory):
    if (args.state or args.roomlist or args.empsearch or args.totaltime or len(args.lowtime) > 0 or len(args.uppertime) > 0 or args.empsearchexclude or (len(args.guestname)+len(args.employeename)) < 1):
        invalid()
else:
    if(len(args.guestname) > 0):
        args.guestname = args.guestname[0]
    else:
        args.guestname = ''

    if(len(args.employeename) > 0):
        args.employeename = args.employeename[0]
    else:
        args.employeename = ''

    if (args.guestname and args.employeename):
        # pick one, not both
        invalid()


# must have at least one
if not(args.state or args.roomlist or args.totaltime or args.empsearchexclude or args.empsearch or args.roomhistory):
    invalid()

if ((args.roomlist or args.totaltime) and not (args.guestname or args.employeename)):
    # roomlist/total time requires name
    invalid()

# sanitized text?
if args.token:
    if not (type(args.token) == type('string')):
        # only one token
        invalid()
    if(sn.sanitizeAlphanumeric(args.token) == False):
        invalid()
else:
    # token is required
    invalid()

if args.log:
    if not len(args.log) == 1:
        # only one log
        invalid()
    else:
        args.log = args.log[0]
    if(sn.sanitizeAlphanumeric(args.log) == False):
        invalid()
    if not (os.path.isfile(args.log)):
        # is that actually a log file?
        invalid()
else:
    # need to specify a log file always
    invalid()

if args.employeename:
    if args.roomhistory:
        for emp in args.employeename:
            if(sn.sanitizeAlpha(emp) == False):
                invalid()
    else:
        # ensure only one arg with -E
        if not (type(args.employeename) == type('string')):
            invalid()
        if(sn.sanitizeAlpha(args.employeename) == False):
            invalid()

if args.guestname and not args.roomhistory:
    if args.roomhistory:
        for guest in args.guestname:
            if(sn.sanitizeAlpha(guest) == False):
                invalid()
    else:
        # ensure only one arg with -G
        if not (type(args.guestname) == type('string')):
            invalid()
        if(sn.sanitizeAlpha(args.guestname) == False):
            invalid()

def verifyLowtime(lowtime):
    if(sn.sanitizeNumber(lowtime) == False):
        invalid()
    if(int(lowtime < 0 )):
        invalid()
    lowtime = int(lowtime)
    # limit numbers to 32 bit intergers...
    if(lowtime > 4294967295):
        invalid()
    return lowtime

def verifyUppertime(lowtime, uppertime):
    if(sn.sanitizeNumber(uppertime) == False):
        invalid()
    if(int(uppertime < lowtime)):
        invalid()
    uppertime = int(uppertime)
    # limit numbers to 32 bit intergers...
    if(uppertime > 4294967295):
        invalid()
    return uppertime

if(len(args.lowtime) > 0):
    if(len(args.lowtime) > 1):
        args.lowtime2 = verifyLowtime(args.lowtime[1])
    args.lowtime = verifyLowtime(args.lowtime[0])
else:
    args.lowtime = None

if(len(args.uppertime) > 0):
    if(len(args.uppertime) > 1):
        args.uppertime2 = verifyUppertime(args.lowtime2, args.uppertime[1])
    args.uppertime = verifyUppertime(args.lowtime, args.uppertime[0])
else:
    args.uppertime = None

# args shouold now be valid
# now we can open and verify the encrypted database

sql = db.DB(args.log, args.token)
if not sql.successful():
    sys.stderr.write("integrity violation\n")
    sys.exit(-1)

### The main program logic goes here

# -S flag
if args.state:
    # get the data from the db
    listEmployees=sql.getPeopleHereByType('E')
    listGuests=sql.getPeopleHereByType('G')
    roomDict=sql.getPeopleByRoom()

    # display according to html flag or regular display
    if args.html:
        SHtmlStart()
        print("<td>{0}</td>".format(string.join(listEmployees,',')))
        print("<td>{0}</td>".format(string.join(listGuests,',')))
        SHtmlMid()
        for room,personList in sorted(roomDict.items()):
            print("<tr>")
            print("<td>{0}</td>".format(room))
            print("<td>{0}</td>".format(string.join(personList,',')))
            print("</tr>")
        HtmlEnd()
    else:
        # normal out put
        print(string.join(listEmployees,','))
        print(string.join(listGuests,','))
        for room,personList in sorted(roomDict.items()):
            print("{0}: {1}".format(room,string.join(personList,',')))

# -R flag
if args.roomlist:
    # get the data from the db
    roomList=[]
    if args.guestname:
        roomList=sql.getRoomsForPerson(args.guestname,'G')
    else:
        roomList=sql.getRoomsForPerson(args.employeename,'E')
    roomList=map(lambda x: str(x),roomList)    # returned as list of int, change to string
    # outputformat for -H or regular
    if args.html:
        RHtmlStart()
        for room in roomList:
            print("<tr>")
            print("<td>{0}</td>".format(room))
            print("</tr>")
        HtmlEnd()
    else:
        print(string.join(roomList,','))

# -T flag
if args.totaltime:
    time=0
    # get the data from the db
    if args.guestname:
        time=sql.getTotalTime(args.guestname,'G')
    else:
        time=sql.getTotalTime(args.employeename,'E')
    if time:
        print(time)

# -A flag
if args.empsearch:
    nameList=sql.getEmployeesDuringRange(args.lowtime,args.uppertime)
    if args.html:
        AHtmlStart()
        for name in nameList:
            print("<tr>")
            print("<td>{0}</td>".format(name))
            print("</tr>")
        HtmlEnd()
    else:
        print(string.join(nameList,','))

# -B flag
if args.empsearchexclude:
    nameList=sql.getEmployeesDuringRange(args.lowtime,args.uppertime)
    removeList=sql.getEmployeesDuringRange(args.lowtime2,args.uppertime2)
    nameList=list(set(nameList).difference(set(removeList)))
    if args.html:
        AHtmlStart()
        for name in nameList:
            print("<tr>")
            print("<td>{0}</td>".format(name))
            print("</tr>")
        HtmlEnd()
    else:
        print(string.join(nameList,','))

def overlapThem(one, two):
    matches = []
    for first in one:
        for second in two:
            if second[0] < first[0]:
                temp = first
                second = first
                first = temp
            if first[1] >= second[0]:
                matches.append((second[0], min(second[1], first[1])))
    return matches

def findOverlaps(myL):
    while(len(myL) > 1):
        first = myL.pop(0)
        second = myL.pop(0)
        ret = overlapThem(first, second)
        if(len(ret) == 0):
            return list()
        else:
            myL.insert(0, ret)
    # check if each room has a time everybody is in
    if(len(myL) > 0):
        myL = myL[0]
    return myL

# -I flag
if args.roomhistory:
    lastT = sql.lastLoggedTime()
    phist = []
    for guest in args.guestname:
        phist.append(sql.getRoomLogByPerson(guest,'G'))
    for emp in args.employeename:
        phist.append(sql.getRoomLogByPerson(emp,'E'))
    # phist -- array of arrays of (time, dir, room)
    roomlists = []
    phashes = []
    for person in phist:
        rooms = []
        h = dict()
        if (len(person) % 2) == 1:
            person.append((lastT, person[-1][1], person[-1][2]))
        for r1, r2 in zip(person[0::2], person[1::2]):
            r = r1[2]
            rooms.append(r)
            startTime = r1[0]
            endTime = r2[0]
            if r not in h.keys():
                h[r] = []
            h[r].append([startTime, endTime])
        phashes.append(h)
        roomlists.append(set(rooms))
    rooms = set.intersection(*roomlists)
    # now, rooms has been visited by everybody in phist
    results = []
    for room in rooms:
        l = []
        for h in phashes:
            l.append(h[room])
        if len(findOverlaps(l)) > 0:
            results.append(room)
    # sort list and return as string
    results.sort()
    results = map(lambda x: str(x), results)
    if args.html:
        RHtmlStart()
        for name in results:
            print("<tr>")
            print("<td>{0}</td>".format(name))
            print("</tr>")
        HtmlEnd()
    else:
        print(string.join(results,','))

# always gracefully close the DB after it is open!
sql.closeDBFile()
