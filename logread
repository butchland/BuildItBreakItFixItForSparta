#!/usr/bin/env python

import argparse
import sys
import os.path
import hashlib
from Crypto.Cipher import AES
import operator
import json
import re

HARDCODED_STRING = "e6f5bfbaae81a4496b5489f"
GALLERY_LOCATION = -1
OUT_OF_GALLERY_LOCATION = -2

def handle_read(options):
    log_path = options.log

    if log_path == None:
        # we need the last argument to be the path to log
        return -1

    if options.token == None and re.match('^[\w]+$', options.token) is not None:
        # need to submit a token and be alpha numeric
        return -1

    if not os.path.isfile(log_path):
        # can't read non existant log
        return -1

    f=open(log_path, 'r')
    raw = f.read()
    f.close()
    nonce = raw[:AES.block_size]
    ciphertext = raw[AES.block_size:]

    # decrypted under the -K option passed in as a 256 hash
    key = hashlib.sha256(options.token).digest()
    obj = AES.new(key, AES.MODE_CFB, nonce)

    message = obj.decrypt(ciphertext)
    hardcode_attempt = message[:len(HARDCODED_STRING)]

    if hardcode_attempt != HARDCODED_STRING:
        # token was not correct if it didn't decrypt
        # to the hardcoded string properly
        return -2

    log_data = message[len(HARDCODED_STRING):]

    data = json.loads(log_data)

    if options.current_state:
        guests = []
        employees = []
        room_info = {}
        for guest in data['g']:
            info = data['g'][guest]
            guests.append(guest)
            room = info['s']
            if room in room_info:
                room_info[room].append(guest)
            else:
                room_info[room] = [guest]
        for employee in data['e']:
            info = data['e'][employee]
            employees.append(employee)
            room = info['s']
            if room in room_info:
                room_info[room].append(employee)
            else:
                room_info[room] = [employee]

        guests.sort()
        employees.sort()

        result = [",".join(guests), ",".join(employees)]

        keys = room_info.keys()
        keys.sort()

        for room in keys:
            values = room_info[room]
            values.sort()
            result.append(str(room) + ': ' + ",".join(values))

        print("\n".join(result))

    if options.rooms_entered:
        if options.guest_names:
            assert(options.employee_names == None)
            assert(len(options.guest_names) == 1)
            datalog = data['g'][options.guest_names[0]]
        else:
            assert(len(options.employee_names) == 1)
            datalog = data['e'][options.employee_names[0]]

        print(",".join(datalog['r']))




def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("-K", dest="token")
    parser.add_argument("-H", dest="html", action='store_true')
    parser.add_argument("-S", dest="current_state", action='store_true')
    parser.add_argument("-R", dest="rooms_entered", action='store_true')
    parser.add_argument("-T", dest="total_time", action='store_true')
    parser.add_argument("-I", dest="matching_rooms", action='store_true')
    parser.add_argument("-A", dest="all_bound", action='store_true')
    parser.add_argument("-B", dest="exclusive_bound", action='store_true')
    parser.add_argument("-E", dest="employee_names", action='append')
    parser.add_argument("-G", dest="guest_names", action='append')
    parser.add_argument("-L", dest="lower_bounds", action='append')
    parser.add_argument("-U", dest="upper_bounds", action='append')
    parser.add_argument('log', help='string for log path')

    args = parser.parse_args()

    result = handle_read(args)

    # try:
    #     result = handle_read(args)
    # except Exception, e:
    #     # if log read wasn't successful it couldn't have been
    #     # generated by log append, thus integrity violation
    #     print e
    #     result = -2

    if result == -2:
        sys.stderr.write("integrity violation")
        sys.exit(-1)
    if result == -1:
        sys.stdout.write('invalid')
        sys.exit(-1)

if __name__ == "__main__":
    main()